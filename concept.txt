graphql-yoga
    graphql-server project easy-setup
    npx create-react-app과 비슷

Problem solved by GraphQL
Over-fetching
    내가 요청한 영역의 정보보다 많은 정보를 서버에서 받는 것
    ex) username만 필요한데 user obj를 받아서 다른 정보도 다 받음
    
    Frontend가 DB에 username만 요청함으로써 해결

Under-fetching
    앱을 처음 시작하려면 여러 요청을 함
    여러 요청이 오고가야 앱을 시작할 수 있음(notification,profile and so on)
    REST에서 하나를 완성하려고 많은 API를 요청하는 것
    (GET /users, GET /user/id , GET /notification)

API에 대해 쉬운 이해 가능(using docs)

GraphQL에서는, URL 체계가 없음 하나의 종점만 있음
    그냥 query로  모든 걸 해결
    쿼리를 백엔드에 보내면 요청정보를 담은 obj를 보내줌
    

GraphQL server 시작
    const server = new GraphQLServer({schema});
    server.start(() => console.log("GraphQL Server Running"));

schema
    사용자에게 보내거나 사용자로부터 받을 data에 대한 frame 
    GraphQL을 이해하기 위한 것

query
    정보를 받을때만 쓰임
    어떤 사용자가 name을 보내면 String을 보냄
    description of the query : description of the response

resolver
    Query를 resolve
    query는 DB에게는 문제같은 느낌
    Query schema -> query resolver

    only query and resolvers not URL
    하고싶은 걸 resolvers에서 해결

resolver에는 정의되지만, schema에는 정의되지 않으면 query에 접근 불가

resolver에서는 string을 return하고, schema에서는 Int를 response한다고 적어두면 error!

! = required, not have to be null

Query = Json Data, POST 요청과 같음
모든 query,mutation다 POST

Mutation : 서버혹은 DB에서 메모리에서 정보를 바꾸는 작업을 할 때


localhost:4000/ (root -> graphql playground, postman같은 느낌)

object의 모든걸 가져오는 over fetching을 지양하기 때문에, 특정 속성을 선택해야함

query{
  person{
    name,
    age,
    gender
  }
}

URL -> body-parser, form제출, query, params, query 받아서 뭘 하고 등등..
in graphQL
    person : (_,{id}) =>{
        console.log(id);
    }
    간단하게 받을 수 있음

resolvers는 뭐든 할 수 있음
    다른 DB에 가거나, 다른 API 부르거나 등등
    

Mutation
    DB 상태가 변할 때 사용
    Boolean등 단일 값을 return하는걸 알면, 하위영역 선택할 필요가 없음

Wrapping REST API, using GraphQL
    why? : 현재 사용하는 백엔드는 REST API인데 GRAPHQL 쓰고싶을 때


node-fetch(npm install node-fetch)
    Node에서 fetch할때 필요함